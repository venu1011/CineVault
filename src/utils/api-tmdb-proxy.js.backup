import axios from 'axios';

const TMDB_API_KEY = import.meta.env.VITE_TMDB_API_KEY;

// Use Vite's built-in proxy for SUPER FAST requests!
const BASE_URL = '/api/tmdb';

const tmdbClient = axios.create({
  baseURL: BASE_URL,
  timeout: 8000 // 8 seconds - much faster!
});

console.log('üîë TMDb API Key Status:', TMDB_API_KEY ? '‚úÖ Loaded' : '‚ùå Missing');

// Simple fetch - no slow external proxies!
const fetchFromTMDb = async (endpoint) => {
  try {
    console.log(`ÔøΩ Fetching: ${endpoint}`);
    const response = await tmdbClient.get(endpoint);
    console.log('‚úÖ Data loaded!');
    return response.data;
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    throw new Error('Failed to fetch data. Please check your connection.');
  }
};

/**
 * Get trending movies
 */
export const getTrendingMovies = async (timeWindow = 'week') => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured. Please add VITE_TMDB_API_KEY to your .env file');
    }
    
    console.log(`üî• Fetching trending movies: ${timeWindow}`);
    const data = await fetchFromTMDb(`/trending/movie/${timeWindow}?api_key=${TMDB_API_KEY}`);
    
    console.log('‚úÖ Trending movies fetched:', data.results?.length);
    return data.results || [];
  } catch (error) {
    console.error('‚ùå Error fetching trending movies:', error.message);
    throw error;
  }
};

/**
 * Get now playing movies
 */
export const getNowPlayingMovies = async () => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    console.log('üé¨ Fetching now playing movies');
    const data = await fetchFromTMDb(`/movie/now_playing?api_key=${TMDB_API_KEY}&language=en-US&page=1`);
    
    console.log('‚úÖ Now playing movies fetched:', data.results?.length);
    return data.results || [];
  } catch (error) {
    console.error('‚ùå Error fetching now playing:', error.message);
    throw error;
  }
};

/**
 * Get popular movies
 */
export const getPopularMovies = async () => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    console.log('‚≠ê Fetching popular movies');
    const data = await fetchFromTMDb(`/movie/popular?api_key=${TMDB_API_KEY}&language=en-US&page=1`);
    
    console.log('‚úÖ Popular movies fetched:', data.results?.length);
    return data.results || [];
  } catch (error) {
    console.error('‚ùå Error fetching popular movies:', error.message);
    throw error;
  }
};

/**
 * Get upcoming movies
 */
export const getUpcomingMovies = async () => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    console.log('üìÖ Fetching upcoming movies');
    const data = await fetchFromTMDb(`/movie/upcoming?api_key=${TMDB_API_KEY}&language=en-US&page=1`);
    
    console.log('‚úÖ Upcoming movies fetched:', data.results?.length);
    return data.results || [];
  } catch (error) {
    console.error('‚ùå Error fetching upcoming movies:', error.message);
    throw error;
  }
};

/**
 * Search movies
 */
export const searchMovies = async (query, page = 1) => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    console.log(`üîç Searching movies: "${query}" (page ${page})`);
    const data = await fetchFromTMDb(`/search/movie?api_key=${TMDB_API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=${page}`);
    
    console.log('‚úÖ Search results:', data.results?.length);
    return {
      results: data.results || [],
      total_pages: data.total_pages || 0,
      total_results: data.total_results || 0
    };
  } catch (error) {
    console.error('‚ùå Error searching movies:', error.message);
    throw error;
  }
};

/**
 * Get movie details
 */
export const getMovieDetails = async (movieId) => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    console.log(`üé¨ Fetching movie details: ${movieId}`);
    // Use append_to_response to get everything in ONE API call!
    const data = await fetchFromTMDb(`/movie/${movieId}?api_key=${TMDB_API_KEY}&language=en-US&append_to_response=videos,credits,similar,recommendations,watch/providers`);
    
    console.log('‚úÖ Movie details fetched with all data');
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching movie details:', error.message);
    throw error;
  }
};

/**
 * Get movie videos (trailers)
 */
export const getMovieVideos = async (movieId) => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    console.log(`üé• Fetching movie videos: ${movieId}`);
    const url = `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=${TMDB_API_KEY}&language=en-US`;
    const data = await fetchWithProxy(url);
    
    return data.results || [];
  } catch (error) {
    console.error('‚ùå Error fetching videos:', error.message);
    return [];
  }
};

/**
 * Get movie trailer (YouTube key)
 */
export const getMovieTrailer = async (movieId) => {
  try {
    const videos = await getMovieVideos(movieId);
    
    // Find official trailer
    const trailer = videos.find(
      video => video.type === 'Trailer' && video.site === 'YouTube'
    );
    
    return trailer || videos[0] || null;
  } catch (error) {
    console.error('‚ùå Error fetching trailer:', error.message);
    return null;
  }
};

/**
 * Get profile image URL from TMDb (DIRECT - No proxy needed for images!)
 */
export const getProfileUrl = (path, size = 'w185') => {
  if (!path) return 'https://via.placeholder.com/185x278/1e293b/f43f5e?text=No+Photo';
  // Images are NOT blocked - access directly for speed!
  return `https://image.tmdb.org/t/p/${size}${path}`;
};

/**
 * Get poster image URL from TMDb (DIRECT - No proxy needed!)
 */
export const getPosterUrl = (path, size = 'w500') => {
  if (!path) return 'https://via.placeholder.com/500x750/1e293b/f43f5e?text=No+Poster';
  // Images are NOT blocked - access directly for speed!
  return `https://image.tmdb.org/t/p/${size}${path}`;
};

/**
 * Get backdrop image URL from TMDb (DIRECT - No proxy needed!)
 */
export const getBackdropUrl = (path, size = 'w1280') => {
  if (!path) return 'https://via.placeholder.com/1280x720/1e293b/f43f5e?text=No+Backdrop';
  // Images are NOT blocked - access directly for speed!
  return `https://image.tmdb.org/t/p/${size}${path}`;
};

/**
 * Get top rated movies of all time
 */
export const getTopRatedMovies = async (page = 1) => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    console.log('üèÜ Fetching top rated movies');
    const url = `https://api.themoviedb.org/3/movie/top_rated?api_key=${TMDB_API_KEY}&language=en-US&page=${page}`;
    const data = await fetchWithProxy(url);
    
    console.log('‚úÖ Top rated movies fetched:', data.results?.length);
    return data.results || [];
  } catch (error) {
    console.error('‚ùå Error fetching top rated movies:', error.message);
    throw error;
  }
};

/**
 * Get movie credits (cast and crew)
 */
export const getMovieCredits = async (movieId) => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    console.log(`üë• Fetching movie credits: ${movieId}`);
    const url = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${TMDB_API_KEY}`;
    const data = await fetchWithProxy(url);
    
    return {
      cast: data.cast || [],
      crew: data.crew || []
    };
  } catch (error) {
    console.error('‚ùå Error fetching credits:', error.message);
    return { cast: [], crew: [] };
  }
};

/**
 * Get similar movies
 */
export const getSimilarMovies = async (movieId) => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    console.log(`üîÑ Fetching similar movies: ${movieId}`);
    const url = `https://api.themoviedb.org/3/movie/${movieId}/similar?api_key=${TMDB_API_KEY}&language=en-US&page=1`;
    const data = await fetchWithProxy(url);
    
    return data.results || [];
  } catch (error) {
    console.error('‚ùå Error fetching similar movies:', error.message);
    return [];
  }
};

/**
 * Get movie recommendations
 */
export const getRecommendations = async (movieId) => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    console.log(`üí° Fetching recommendations: ${movieId}`);
    const url = `https://api.themoviedb.org/3/movie/${movieId}/recommendations?api_key=${TMDB_API_KEY}&language=en-US&page=1`;
    const data = await fetchWithProxy(url);
    
    return data.results || [];
  } catch (error) {
    console.error('‚ùå Error fetching recommendations:', error.message);
    return [];
  }
};

/**
 * Get watch providers (streaming services)
 */
export const getWatchProviders = async (movieId) => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    console.log(`üì∫ Fetching watch providers: ${movieId}`);
    const url = `https://api.themoviedb.org/3/movie/${movieId}/watch/providers?api_key=${TMDB_API_KEY}`;
    const data = await fetchWithProxy(url);
    
    return data.results || {};
  } catch (error) {
    console.error('‚ùå Error fetching watch providers:', error.message);
    return {};
  }
};

/**
 * Get all movie genres
 */
export const getGenres = async () => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    console.log('üé≠ Fetching genres');
    const url = `https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`;
    const data = await fetchWithProxy(url);
    
    return data.genres || [];
  } catch (error) {
    console.error('‚ùå Error fetching genres:', error.message);
    return [];
  }
};

/**
 * Discover movies by genre, year, rating, etc.
 */
export const discoverMovies = async (filters = {}) => {
  try {
    if (!TMDB_API_KEY) {
      throw new Error('TMDb API key is not configured');
    }
    
    const {
      genreIds = [],
      year = null,
      minRating = null,
      maxRating = null,
      sortBy = 'popularity.desc',
      page = 1
    } = filters;
    
    let url = `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}&language=en-US&page=${page}&sort_by=${sortBy}`;
    
    if (genreIds.length > 0) {
      url += `&with_genres=${genreIds.join(',')}`;
    }
    if (year) {
      url += `&primary_release_year=${year}`;
    }
    if (minRating) {
      url += `&vote_average.gte=${minRating}`;
    }
    if (maxRating) {
      url += `&vote_average.lte=${maxRating}`;
    }
    
    console.log('üîç Discovering movies with filters:', filters);
    const data = await fetchWithProxy(url);
    
    return {
      results: data.results || [],
      total_pages: data.total_pages || 0,
      total_results: data.total_results || 0
    };
  } catch (error) {
    console.error('‚ùå Error discovering movies:', error.message);
    throw error;
  }
};

/**
 * Normalize movie data from TMDb
 */
export const normalizeMovie = (movie) => {
  return {
    id: movie.id,
    title: movie.title || movie.name,
    poster: getPosterUrl(movie.poster_path),
    backdrop: getBackdropUrl(movie.backdrop_path),
    rating: movie.vote_average,
    year: movie.release_date ? new Date(movie.release_date).getFullYear() : 'N/A',
    overview: movie.overview,
    releaseDate: movie.release_date,
    voteCount: movie.vote_count,
    popularity: movie.popularity,
    originalData: movie
  };
};

export default {
  getTrendingMovies,
  getNowPlayingMovies,
  getPopularMovies,
  getUpcomingMovies,
  getTopRatedMovies,
  searchMovies,
  getMovieDetails,
  getMovieVideos,
  getMovieTrailer,
  getMovieCredits,
  getSimilarMovies,
  getRecommendations,
  getWatchProviders,
  getGenres,
  discoverMovies,
  getPosterUrl,
  getBackdropUrl,
  getProfileUrl,
  normalizeMovie
};
